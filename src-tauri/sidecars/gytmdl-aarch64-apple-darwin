#!/usr/bin/env python3
"""
Mock gytmdl binary for testing gytmdl-gui.
This simulates the behavior of the real gytmdl binary.
"""

import sys
import time
import random
import os

def main():
    args = sys.argv[1:]
    
    # Handle --version command
    if "--version" in args:
        print("gytmdl 1.0.0 (mock version for testing)")
        return 0
    
    # Handle --help command
    if "--help" in args or "-h" in args:
        print("Mock gytmdl - YouTube Music Downloader (Testing Version)")
        print("Usage: gytmdl [options] URL")
        print("Options:")
        print("  --version          Show version")
        print("  --help, -h         Show this help")
        print("  --output-path DIR  Output directory")
        print("  --temp-path DIR    Temporary directory")
        print("  --progress         Show progress")
        print("  --verbose          Verbose output")
        return 0
    
    # Find the URL (last argument that looks like a URL)
    url = None
    for arg in reversed(args):
        if arg.startswith("http"):
            url = arg
            break
    
    if not url:
        print("Error: No URL provided", file=sys.stderr)
        return 1
    
    # Simulate download process
    print(f"Starting download: {url}")
    print("Initializing...")
    time.sleep(0.5)
    
    # Simulate progress updates
    stages = [
        "Extracting video info",
        "Downloading audio",
        "Processing metadata",
        "Applying tags",
        "Finalizing"
    ]
    
    for i, stage in enumerate(stages):
        print(f"[INFO] {stage}...")
        
        # Simulate progress within each stage
        for progress in range(0, 101, random.randint(5, 15)):
            if progress > 100:
                progress = 100
            print(f"Progress: {progress}% - {stage}")
            time.sleep(0.1)
        
        time.sleep(0.2)
    
    print("Download completed successfully!")
    print(f"Saved to: mock_output/{url.split('/')[-1]}.mp3")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
